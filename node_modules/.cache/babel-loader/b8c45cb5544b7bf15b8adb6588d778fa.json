{"ast":null,"code":"import _objectSpread from \"/home/jcbasson/Projects/ubs-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/jcbasson/Projects/ubs-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/jcbasson/Projects/ubs-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/jcbasson/Projects/ubs-assessment/src/components/bookButton/component.tsx\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 0;\\n  background-color: transparent;\\n  cursor: pointer;\\n  background-color: #58bfa9;\\n  color: white;\\n  width: 100%;\\n  height: 40px;\\n  border-radius: 10px;\\n  border: none;\\n  margin-top: 15px;\\n  outline: none;\\n  font-family: sans-serif;\\n  \\n  &:disabled {\\n      opacity: .5;\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation BookAppointment(\\n    $notes: String\\n    $userId: Int!\\n    $consultantType: String!\\n    $appointmentType: [String]!\\n    $time: String!\\n  ) {\\n    bookAppointment(\\n      notes: $notes\\n      userId: $userId\\n      consultantType: $consultantType\\n      appointmentType: $appointmentType\\n      time: $time\\n    ) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { connect, batch } from 'react-redux';\nimport { getBookingData, isBookingAvailable } from './utils';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { requestBooking, bookingCompleted } from './actions';\nimport { clearTimeSlot } from '../timeSlots';\nimport { clearAppointmentType } from '../appointmentTypes';\nimport { clearNotes } from '../notes';\nvar BOOK_APPOINTMENT = gql(_templateObject());\nexport var BookButtonUI = function BookButtonUI(_ref) {\n  var isAvailable = _ref.isAvailable,\n      clickHandler = _ref.clickHandler,\n      bookingData = _ref.bookingData;\n\n  var _useMutation = useMutation(BOOK_APPOINTMENT),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      bookAppointment = _useMutation2[0],\n      data = _useMutation2[1].data;\n\n  return isAvailable ? React.createElement(React.Fragment, null, React.createElement(BookAppointmentButton, {\n    onClick: clickHandler(bookAppointment, bookingData),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Book\")) : React.createElement(React.Fragment, null, React.createElement(BookAppointmentButton, {\n    disabled: true,\n    onClick: clickHandler(bookAppointment, bookingData),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Book\"));\n};\nvar BookAppointmentButton = styled.button(_templateObject2());\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  var getBooking = getBookingData();\n  return function (state) {\n    var bookingData = getBooking(state);\n    return {\n      bookingData: bookingData,\n      isAvailable: isBookingAvailable(bookingData)\n    };\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    clickHandler: function clickHandler(bookAppointment, bookingData) {\n      return function () {\n        dispatch(requestBooking());\n        bookAppointment({\n          variables: _objectSpread({}, bookingData),\n          update: function update(cache, data) {\n            if (data) {\n              batch(function () {\n                dispatch(clearTimeSlot());\n                dispatch(clearAppointmentType());\n                dispatch(clearNotes());\n                dispatch(bookingCompleted());\n              });\n            }\n          }\n        });\n      };\n    }\n  };\n};\n\nexport var BookButton = connect(makeMapStateToProps, mapDispatchToProps)(BookButtonUI);","map":{"version":3,"sources":["/home/jcbasson/Projects/ubs-assessment/src/components/bookButton/component.tsx"],"names":["React","styled","connect","batch","getBookingData","isBookingAvailable","gql","useMutation","requestBooking","bookingCompleted","clearTimeSlot","clearAppointmentType","clearNotes","BOOK_APPOINTMENT","BookButtonUI","isAvailable","clickHandler","bookingData","bookAppointment","data","BookAppointmentButton","button","makeMapStateToProps","getBooking","state","mapDispatchToProps","dispatch","variables","update","cache","BookButton"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,aAA/B;AAGA,SAASC,cAAT,EAAyBC,kBAAzB,QAAmD,SAAnD;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,WAAjD;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,UAAT,QAA2B,UAA3B;AAEA,IAAMC,gBAAgB,GAAGP,GAAH,mBAAtB;AAoBA,OAAO,IAAMQ,YAAsD,GAAG,SAAzDA,YAAyD,OAIhE;AAAA,MAHJC,WAGI,QAHJA,WAGI;AAAA,MAFJC,YAEI,QAFJA,YAEI;AAAA,MADJC,WACI,QADJA,WACI;;AAAA,qBACgCV,WAAW,CAACM,gBAAD,CAD3C;AAAA;AAAA,MACGK,eADH;AAAA,MACsBC,IADtB,oBACsBA,IADtB;;AAEJ,SAAOJ,WAAW,GAChB,0CACE,oBAAC,qBAAD;AACE,IAAA,OAAO,EAAEC,YAAY,CAACE,eAAD,EAAkBD,WAAlB,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADgB,GAShB,0CACE,oBAAC,qBAAD;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,OAAO,EAAED,YAAY,CAACE,eAAD,EAAkBD,WAAlB,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CATF;AAkBD,CAxBM;AA0BP,IAAMG,qBAAqB,GAAGnB,MAAM,CAACoB,MAAV,oBAA3B;;AAmBA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,MAAMC,UAAU,GAAGnB,cAAc,EAAjC;AAEA,SAAO,UAACoB,KAAD,EAAgB;AACrB,QAAMP,WAAW,GAAGM,UAAU,CAACC,KAAD,CAA9B;AACA,WAAO;AACLP,MAAAA,WAAW,EAAXA,WADK;AAELF,MAAAA,WAAW,EAAEV,kBAAkB,CAACY,WAAD;AAF1B,KAAP;AAID,GAND;AAOD,CAVD;;AAYA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAwB;AACjD,SAAO;AACLV,IAAAA,YAAY,EAAE,sBACZE,eADY,EAEZD,WAFY;AAAA,aAGT,YAAM;AACTS,QAAAA,QAAQ,CAAClB,cAAc,EAAf,CAAR;AACAU,QAAAA,eAAe,CAAC;AACdS,UAAAA,SAAS,oBAAOV,WAAP,CADK;AAEdW,UAAAA,MAAM,EAAE,gBAACC,KAAD,EAAaV,IAAb,EAA2B;AACjC,gBAAIA,IAAJ,EAAU;AACRhB,cAAAA,KAAK,CAAC,YAAM;AACVuB,gBAAAA,QAAQ,CAAChB,aAAa,EAAd,CAAR;AACAgB,gBAAAA,QAAQ,CAACf,oBAAoB,EAArB,CAAR;AACAe,gBAAAA,QAAQ,CAACd,UAAU,EAAX,CAAR;AACAc,gBAAAA,QAAQ,CAACjB,gBAAgB,EAAjB,CAAR;AACD,eALI,CAAL;AAOD;AACF;AAZa,SAAD,CAAf;AAcD,OAnBa;AAAA;AADT,GAAP;AAsBD,CAvBD;;AAyBA,OAAO,IAAMqB,UAAU,GAAG5B,OAAO,CAC/BoB,mBAD+B,EAE/BG,kBAF+B,CAAP,CAGxBX,YAHwB,CAAnB","sourcesContent":["import * as React from 'react'\nimport styled from 'styled-components'\nimport { connect, batch } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { BookButtonTypes } from './types'\nimport { getBookingData, isBookingAvailable } from './utils'\nimport gql from 'graphql-tag'\nimport { useMutation } from '@apollo/react-hooks'\nimport { requestBooking, bookingCompleted } from './actions'\nimport { clearTimeSlot } from '../timeSlots'\nimport { clearAppointmentType } from '../appointmentTypes'\nimport { clearNotes } from '../notes';\n\nconst BOOK_APPOINTMENT = gql`\n  mutation BookAppointment(\n    $notes: String\n    $userId: Int!\n    $consultantType: String!\n    $appointmentType: [String]!\n    $time: String!\n  ) {\n    bookAppointment(\n      notes: $notes\n      userId: $userId\n      consultantType: $consultantType\n      appointmentType: $appointmentType\n      time: $time\n    ) {\n      id\n    }\n  }\n`\n\nexport const BookButtonUI: React.FC<BookButtonTypes.UI.IBookButton> = ({\n  isAvailable,\n  clickHandler,\n  bookingData,\n}) => {\n  const [bookAppointment, { data }] = useMutation(BOOK_APPOINTMENT)\n  return isAvailable ? (\n    <>\n      <BookAppointmentButton\n        onClick={clickHandler(bookAppointment, bookingData)}\n      >\n        Book\n      </BookAppointmentButton>\n    </>\n  ) : (\n    <>\n      <BookAppointmentButton\n        disabled\n        onClick={clickHandler(bookAppointment, bookingData)}\n      >\n        Book\n      </BookAppointmentButton>\n    </>\n  )\n}\n\nconst BookAppointmentButton = styled.button`\n  padding: 0;\n  background-color: transparent;\n  cursor: pointer;\n  background-color: #58bfa9;\n  color: white;\n  width: 100%;\n  height: 40px;\n  border-radius: 10px;\n  border: none;\n  margin-top: 15px;\n  outline: none;\n  font-family: sans-serif;\n  \n  &:disabled {\n      opacity: .5;\n  }\n`\n\nconst makeMapStateToProps = () => {\n  const getBooking = getBookingData()\n\n  return (state: any) => {\n    const bookingData = getBooking(state)\n    return {\n      bookingData,\n      isAvailable: isBookingAvailable(bookingData),\n    }\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    clickHandler: (\n      bookAppointment: Function,\n      bookingData: BookButtonTypes.Data.IBookingData\n    ) => () => {\n      dispatch(requestBooking())\n      bookAppointment({\n        variables: { ...bookingData },\n        update: (cache: any, data: any) => {\n          if (data) {\n            batch(() => {\n              dispatch(clearTimeSlot())\n              dispatch(clearAppointmentType())\n              dispatch(clearNotes())\n              dispatch(bookingCompleted())\n            })\n           \n          }\n        },\n      })\n    },\n  }\n}\n\nexport const BookButton = connect(\n  makeMapStateToProps,\n  mapDispatchToProps\n)(BookButtonUI)\n"]},"metadata":{},"sourceType":"module"}