{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/jcbasson/Projects/ubs-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/jcbasson/Projects/ubs-assessment/src/components/timeSlots/component.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query AvailableSlots($consultantType: String!){\\n    availableSlots(consultantType: $consultantType) {\\n      id, \\n      time\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { setTimeSlot } from './actions';\nimport { Title, TimeSlotsContainer, TimeSlot } from './styled';\nimport { formatTimeSlotTimes } from './utils';\nexport var GET_TIME_SLOTS_QUERY = gql(_templateObject());\nexport var TimeSlotsUI = function TimeSlotsUI(_ref) {\n  var consultantType = _ref.consultantType,\n      setSelected = _ref.setSelected,\n      selectedTimeSlot = _ref.selectedTimeSlot;\n\n  var _useQuery = useQuery(GET_TIME_SLOTS_QUERY, {\n    variables: {\n      consultantType: consultantType\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return null;\n  if (error) return React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Error!\");\n  var availableSlots = formatTimeSlotTimes(_.get(data, 'availableSlots', []));\n  return React.createElement(React.Fragment, null, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Date & Time\"), React.createElement(TimeSlotsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, availableSlots.map(function (as) {\n    return React.createElement(TimeSlot, {\n      key: as.id,\n      onClick: setSelected(as.time),\n      isSelected: selectedTimeSlot === as.time,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, as.displayTime);\n  })));\n};\n\nfunction mapStateToProps(state) {\n  var consultantType = _.get(state, 'consultantType', '');\n\n  var selectedTimeSlot = _.get(state, 'timeSlot');\n\n  return {\n    consultantType: consultantType,\n    selectedTimeSlot: selectedTimeSlot\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setSelected: function setSelected(timeSlot) {\n      return function () {\n        return dispatch(setTimeSlot(timeSlot));\n      };\n    }\n  };\n};\n\nexport var TimeSlots = connect(mapStateToProps, mapDispatchToProps)(TimeSlotsUI);","map":{"version":3,"sources":["/home/jcbasson/Projects/ubs-assessment/src/components/timeSlots/component.tsx"],"names":["React","gql","useQuery","_","connect","setTimeSlot","Title","TimeSlotsContainer","TimeSlot","formatTimeSlotTimes","GET_TIME_SLOTS_QUERY","TimeSlotsUI","consultantType","setSelected","selectedTimeSlot","variables","loading","error","data","availableSlots","get","map","as","id","time","displayTime","mapStateToProps","state","mapDispatchToProps","dispatch","timeSlot","TimeSlots"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,KAAT,EAAgBC,kBAAhB,EAAoCC,QAApC,QAAoD,UAApD;AACA,SAASC,mBAAT,QAAoC,SAApC;AAGA,OAAO,IAAMC,oBAAoB,GAAGT,GAAH,mBAA1B;AAQP,OAAO,IAAMU,WAAmD,GAAG,SAAtDA,WAAsD,OAI7D;AAAA,MAHFC,cAGE,QAHFA,cAGE;AAAA,MAFFC,WAEE,QAFFA,WAEE;AAAA,MADFC,gBACE,QADFA,gBACE;;AAAA,kBAC6BZ,QAAQ,CAACQ,oBAAD,EAAuB;AAC9DK,IAAAA,SAAS,EAAE;AAAEH,MAAAA,cAAc,EAAdA;AAAF;AADmD,GAAvB,CADrC;AAAA,MACII,OADJ,aACIA,OADJ;AAAA,MACaC,KADb,aACaA,KADb;AAAA,MACoBC,IADpB,aACoBA,IADpB;;AAKJ,MAAIF,OAAJ,EAAa,OAAO,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAEX,MAAME,cAAc,GAAGV,mBAAmB,CAACN,CAAC,CAACiB,GAAF,CAAMF,IAAN,EAAY,gBAAZ,EAA8B,EAA9B,CAAD,CAA1C;AAEA,SACE,0CACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,cAAc,CAACE,GAAf,CAAmB,UAACC,EAAD;AAAA,WAClB,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,EAAE,CAACC,EAAlB;AAAsB,MAAA,OAAO,EAAEV,WAAW,CAACS,EAAE,CAACE,IAAJ,CAA1C;AAAqD,MAAA,UAAU,EAAEV,gBAAgB,KAAKQ,EAAE,CAACE,IAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgGF,EAAE,CAACG,WAAnG,CADkB;AAAA,GAAnB,CADH,CAFF,CADF;AAUD,CAxBM;;AA0BP,SAASC,eAAT,CAAyBC,KAAzB,EAAqC;AACnC,MAAMf,cAAc,GAAGT,CAAC,CAACiB,GAAF,CAAMO,KAAN,EAAa,gBAAb,EAA+B,EAA/B,CAAvB;;AACA,MAAMb,gBAAgB,GAAIX,CAAC,CAACiB,GAAF,CAAMO,KAAN,EAAa,UAAb,CAA1B;;AACA,SAAO;AAAEf,IAAAA,cAAc,EAAdA,cAAF;AAAkBE,IAAAA,gBAAgB,EAAhBA;AAAlB,GAAP;AACD;;AAED,IAAMc,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAwB;AAC/C,SAAO;AACLhB,IAAAA,WAAW,EAAE,qBAACiB,QAAD;AAAA,aAAsB;AAAA,eAAMD,QAAQ,CAACxB,WAAW,CAACyB,QAAD,CAAZ,CAAd;AAAA,OAAtB;AAAA;AADR,GAAP;AAGD,CAJH;;AAMA,OAAO,IAAMC,SAAS,GAAG3B,OAAO,CAACsB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CjB,WAA7C,CAAlB","sourcesContent":["import * as React from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/react-hooks'\nimport _ from 'lodash'\nimport { connect } from 'react-redux'\nimport { Dispatch } from 'redux';\nimport { setTimeSlot } from './actions';\nimport { Title, TimeSlotsContainer, TimeSlot } from './styled';\nimport { formatTimeSlotTimes } from './utils';\nimport { TimeSlotsTypes } from './types';\n\nexport const GET_TIME_SLOTS_QUERY = gql`\n  query AvailableSlots($consultantType: String!){\n    availableSlots(consultantType: $consultantType) {\n      id, \n      time\n    }\n  }\n`\nexport const TimeSlotsUI: React.FC<TimeSlotsTypes.UI.ITimeSlots> = ({\n    consultantType,\n    setSelected,\n    selectedTimeSlot\n}) => {\n  const { loading, error, data } = useQuery(GET_TIME_SLOTS_QUERY, {\n    variables: { consultantType },\n  });\n\n  if (loading) return null\n  if (error) return <h2>Error!</h2>\n\n  const availableSlots = formatTimeSlotTimes(_.get(data, 'availableSlots', []));\n\n  return (\n    <>\n      <Title>Date & Time</Title>\n      <TimeSlotsContainer>\n        {availableSlots.map((as: any) => (\n          <TimeSlot key={as.id} onClick={setSelected(as.time)} isSelected={selectedTimeSlot === as.time}>{as.displayTime}</TimeSlot>\n        ))}\n      </TimeSlotsContainer>\n    </>\n  )\n}\n\nfunction mapStateToProps(state: any) {\n  const consultantType = _.get(state, 'consultantType', '');\n  const selectedTimeSlot =  _.get(state, 'timeSlot');\n  return { consultantType, selectedTimeSlot }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n      setSelected: (timeSlot: string) => () => dispatch(setTimeSlot(timeSlot))\n    }\n  }\n\nexport const TimeSlots = connect(mapStateToProps, mapDispatchToProps)(TimeSlotsUI)\n"]},"metadata":{},"sourceType":"module"}