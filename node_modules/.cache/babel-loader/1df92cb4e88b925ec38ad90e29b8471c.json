{"ast":null,"code":"import _regeneratorRuntime from \"/home/jcbasson/Projects/ubs-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchJokes),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchPollJokesSaga);\n\nimport { call, put, select, take, race } from \"redux-saga/effects\";\nimport { FETCH_JOKE_SUCCESS, FETCH_JOKE_FAILURE, START_POLLING, STOP_POLLING } from \"./actions\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\nvar ENDPOINT = \"http://localhost:3000/availableSlots\";\n\nvar delay = function delay(duration) {\n  var promise = new Promise(function (resolve) {\n    setTimeout(function () {\n      return resolve(true);\n    }, duration);\n  });\n  return promise;\n};\n\nexport var getJokes = function getJokes(state) {\n  return _.get(state, \"jokes.items\");\n};\n\nfunction fetchJokes(action) {\n  var previousJokes, _ref, data;\n\n  return _regeneratorRuntime.wrap(function fetchJokes$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!true) {\n            _context.next = 22;\n            break;\n          }\n\n          _context.prev = 1;\n          _context.next = 4;\n          return select(getJokes);\n\n        case 4:\n          previousJokes = _context.sent;\n          console.log(\"Jokes = \", previousJokes);\n          _context.next = 8;\n          return call(function () {\n            return axios({\n              url: ENDPOINT\n            });\n          });\n\n        case 8:\n          _ref = _context.sent;\n          data = _ref.data;\n          _context.next = 12;\n          return put({\n            type: FETCH_JOKE_SUCCESS,\n            data: data\n          });\n\n        case 12:\n          _context.next = 14;\n          return call(delay, 5000);\n\n        case 14:\n          _context.next = 20;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 20;\n          return put({\n            type: FETCH_JOKE_FAILURE,\n            message: _context.t0.message\n          });\n\n        case 20:\n          _context.next = 0;\n          break;\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 16]]);\n}\n\nexport function watchPollJokesSaga() {\n  var _data;\n\n  return _regeneratorRuntime.wrap(function watchPollJokesSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(START_POLLING);\n\n        case 3:\n          _data = _context2.sent;\n          _context2.next = 6;\n          return race([call(fetchJokes, _data), take(STOP_POLLING)]);\n\n        case 6:\n          _context2.next = 0;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/home/jcbasson/Projects/ubs-assessment/src/components/FXTicker/sagas.ts"],"names":["fetchJokes","watchPollJokesSaga","call","put","select","take","race","FETCH_JOKE_SUCCESS","FETCH_JOKE_FAILURE","START_POLLING","STOP_POLLING","axios","_","ENDPOINT","delay","duration","promise","Promise","resolve","setTimeout","getJokes","state","get","action","previousJokes","console","log","url","data","type","message"],"mappings":";;;;yBAsBUA,U;;;yBAcOC,kB;;AApCjB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAAwCC,IAAxC,EAA8CC,IAA9C,QAA0D,oBAA1D;AACA,SAEEC,kBAFF,EAGEC,kBAHF,EAIEC,aAJF,EAKEC,YALF,QAMO,WANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,IAAMC,QAAQ,GAAG,sCAAjB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,QAAD,EAAsB;AAClC,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACrCC,IAAAA,UAAU,CAAC;AAAA,aAAMD,OAAO,CAAC,IAAD,CAAb;AAAA,KAAD,EAAsBH,QAAtB,CAAV;AACD,GAFe,CAAhB;AAGA,SAAOC,OAAP;AACD,CALD;;AAOA,OAAO,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAgBT,CAAC,CAACU,GAAF,CAAMD,KAAN,EAAa,aAAb,CAAhB;AAAA,CAAjB;;AAEP,SAAUrB,UAAV,CAAqBuB,MAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACS,IADT;AAAA;AAAA;AAAA;;AAAA;AAAA;AAG0B,iBAAMnB,MAAM,CAACgB,QAAD,CAAZ;;AAH1B;AAGUI,UAAAA,aAHV;AAIMC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,aAAxB;AAJN;AAKuB,iBAAMtB,IAAI,CAAC;AAAA,mBAAMS,KAAK,CAAC;AAAEgB,cAAAA,GAAG,EAAEd;AAAP,aAAD,CAAX;AAAA,WAAD,CAAV;;AALvB;AAAA;AAKce,UAAAA,IALd,QAKcA,IALd;AAAA;AAMM,iBAAMzB,GAAG,CAAC;AAAE0B,YAAAA,IAAI,EAAEtB,kBAAR;AAA4BqB,YAAAA,IAAI,EAAEA;AAAlC,WAAD,CAAT;;AANN;AAAA;AAOM,iBAAM1B,IAAI,CAACY,KAAD,EAAQ,IAAR,CAAV;;AAPN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASM,iBAAMX,GAAG,CAAC;AAAE0B,YAAAA,IAAI,EAAErB,kBAAR;AAA4BsB,YAAAA,OAAO,EAAE,YAAEA;AAAvC,WAAD,CAAT;;AATN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,OAAO,SAAU7B,kBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,IADF;AAAA;AAAA;AAAA;;AAAA;AAEU,iBAAMI,IAAI,CAACI,aAAD,CAAV;;AAFV;AAEGmB,UAAAA,KAFH;AAAA;AAGH,iBAAMtB,IAAI,CAAC,CAACJ,IAAI,CAACF,UAAD,EAAa4B,KAAb,CAAL,EAAyBvB,IAAI,CAACK,YAAD,CAA7B,CAAD,CAAV;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put, select, takeLatest, take, race } from \"redux-saga/effects\";\nimport {\n  FETCH_JOKE,\n  FETCH_JOKE_SUCCESS,\n  FETCH_JOKE_FAILURE,\n  START_POLLING,\n  STOP_POLLING\n} from \"./actions\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\n\nconst ENDPOINT = \"http://localhost:3000/availableSlots\";\n\nconst delay = (duration: number) => {\n  const promise = new Promise(resolve => {\n    setTimeout(() => resolve(true), duration);\n  });\n  return promise;\n};\n\nexport const getJokes = (state: any) => _.get(state, \"jokes.items\");\n\nfunction* fetchJokes(action: any) {\n  while (true) {\n    try {\n      let previousJokes = yield select(getJokes);\n      console.log(\"Jokes = \", previousJokes);\n      const { data } = yield call(() => axios({ url: ENDPOINT }));\n      yield put({ type: FETCH_JOKE_SUCCESS, data: data });\n      yield call(delay, 5000);\n    } catch (e) {\n      yield put({ type: FETCH_JOKE_FAILURE, message: e.message });\n    }\n  }\n}\n\nexport function* watchPollJokesSaga() {\n  while (true) {\n    const data = yield take(START_POLLING);\n    yield race([call(fetchJokes, data), take(STOP_POLLING)]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}