{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/jcbasson/Projects/ubs-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/jcbasson/Projects/ubs-assessment/src/components/consultantTypes/component.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ConsultantTypes {\\n    consultantTypes\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport _ from 'lodash';\nimport { connect, batch } from 'react-redux';\nimport { setConsultantType } from './actions';\nimport { Title, ConsultantTypesContainer, ConsultantType } from './styled';\nimport { clearTimeSlot } from '../timeSlots';\nimport { clearAppointmentType } from '../appointmentTypes';\nexport var GET_CONSULTANT_TYPES_QUERY = gql(_templateObject());\nexport var ConsultantTypesUI = function ConsultantTypesUI(_ref) {\n  var consultantType = _ref.consultantType,\n      setSelected = _ref.setSelected;\n\n  var _useQuery = useQuery(GET_CONSULTANT_TYPES_QUERY),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return null;\n  if (error) return React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Error!\");\n\n  var consultantTypes = _.get(data, 'consultantTypes', []);\n\n  return React.createElement(React.Fragment, null, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Consultant Type\"), React.createElement(ConsultantTypesContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, consultantTypes.map(function (ct) {\n    return React.createElement(ConsultantType, {\n      key: ct,\n      onClick: setSelected(ct),\n      isSelected: consultantType === ct,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, ct === 'gp' ? 'GP' : ct);\n  })));\n};\n\nfunction mapStateToProps(state) {\n  var consultantType = _.get(state, 'consultantType', '');\n\n  return {\n    consultantType: consultantType\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setSelected: function setSelected(consultantType) {\n      return function () {\n        batch(function () {\n          dispatch(setConsultantType(consultantType));\n          dispatch(clearTimeSlot());\n          dispatch(clearAppointmentType());\n        });\n      };\n    }\n  };\n};\n\nexport var ConsultantTypes = connect(mapStateToProps, mapDispatchToProps)(ConsultantTypesUI);","map":{"version":3,"sources":["/home/jcbasson/Projects/ubs-assessment/src/components/consultantTypes/component.tsx"],"names":["React","gql","useQuery","_","connect","batch","setConsultantType","Title","ConsultantTypesContainer","ConsultantType","clearTimeSlot","clearAppointmentType","GET_CONSULTANT_TYPES_QUERY","ConsultantTypesUI","consultantType","setSelected","loading","error","data","consultantTypes","get","map","ct","mapStateToProps","state","mapDispatchToProps","dispatch","ConsultantTypes"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,aAA/B;AAEA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,KAAT,EAAgBC,wBAAhB,EAA0CC,cAA1C,QAAgE,UAAhE;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,oBAAT,QAAqC,qBAArC;AAEA,OAAO,IAAMC,0BAA0B,GAAGX,GAAH,mBAAhC;AAWP,OAAO,IAAMY,iBAA6C,GAAG,SAAhDA,iBAAgD,OAGvD;AAAA,MAFFC,cAEE,QAFFA,cAEE;AAAA,MADFC,WACE,QADFA,WACE;;AAAA,kBAC6Bb,QAAQ,CAACU,0BAAD,CADrC;AAAA,MACII,OADJ,aACIA,OADJ;AAAA,MACaC,KADb,aACaA,KADb;AAAA,MACoBC,IADpB,aACoBA,IADpB;;AAGJ,MAAIF,OAAJ,EAAa,OAAO,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;;AAEX,MAAME,eAAe,GAAGhB,CAAC,CAACiB,GAAF,CAAMF,IAAN,EAAY,iBAAZ,EAA+B,EAA/B,CAAxB;;AAEA,SACE,0CACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,oBAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,eAAe,CAACE,GAAhB,CAAoB,UAACC,EAAD;AAAA,WACnB,oBAAC,cAAD;AAAgB,MAAA,GAAG,EAAEA,EAArB;AAAyB,MAAA,OAAO,EAAEP,WAAW,CAACO,EAAD,CAA7C;AAAmD,MAAA,UAAU,EAAER,cAAc,KAAKQ,EAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuFA,EAAE,KAAK,IAAP,GAAc,IAAd,GAAqBA,EAA5G,CADmB;AAAA,GAApB,CADH,CAFF,CADF;AAUD,CArBM;;AAuBP,SAASC,eAAT,CAAyBC,KAAzB,EAAqC;AACnC,MAAMV,cAAc,GAAGX,CAAC,CAACiB,GAAF,CAAMI,KAAN,EAAa,gBAAb,EAA+B,EAA/B,CAAvB;;AACA,SAAO;AAAEV,IAAAA,cAAc,EAAdA;AAAF,GAAP;AACD;;AAED,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAwB;AAC/C,SAAO;AACLX,IAAAA,WAAW,EAAE,qBAACD,cAAD;AAAA,aAA4B,YAAM;AAC7CT,QAAAA,KAAK,CAAC,YAAM;AACVqB,UAAAA,QAAQ,CAACpB,iBAAiB,CAACQ,cAAD,CAAlB,CAAR;AACAY,UAAAA,QAAQ,CAAChB,aAAa,EAAd,CAAR;AACAgB,UAAAA,QAAQ,CAACf,oBAAoB,EAArB,CAAR;AACD,SAJI,CAAL;AAMD,OAPY;AAAA;AADR,GAAP;AAUD,CAXH;;AAaA,OAAO,IAAMgB,eAAe,GAAGvB,OAAO,CAACmB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CZ,iBAA7C,CAAxB","sourcesContent":["import * as React from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/react-hooks'\nimport _ from 'lodash'\nimport { connect, batch } from 'react-redux'\nimport { Dispatch } from 'redux';\nimport { setConsultantType } from './actions';\nimport { Title, ConsultantTypesContainer, ConsultantType } from './styled';\nimport { clearTimeSlot } from '../timeSlots';\nimport { clearAppointmentType } from '../appointmentTypes'\n\nexport const GET_CONSULTANT_TYPES_QUERY = gql`\n  query ConsultantTypes {\n    consultantTypes\n  }\n`\n\ninterface IConsultantTypes {\n    consultantType: string\n    setSelected: (consultantType: string) => () => void;\n}\n\nexport const ConsultantTypesUI: React.FC<IConsultantTypes> = ({\n    consultantType,\n    setSelected,\n}) => {\n  const { loading, error, data } = useQuery(GET_CONSULTANT_TYPES_QUERY)\n\n  if (loading) return null\n  if (error) return <h2>Error!</h2>\n\n  const consultantTypes = _.get(data, 'consultantTypes', [])\n\n  return (\n    <>\n      <Title>Consultant Type</Title>\n      <ConsultantTypesContainer>\n        {consultantTypes.map((ct: string) => (\n          <ConsultantType key={ct} onClick={setSelected(ct)} isSelected={consultantType === ct}>{ct === 'gp' ? 'GP' : ct}</ConsultantType>\n        ))}\n      </ConsultantTypesContainer>\n    </>\n  )\n}\n\nfunction mapStateToProps(state: any) {\n  const consultantType = _.get(state, 'consultantType', '');\n  return { consultantType }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n      setSelected: (consultantType: string) => () => {\n        batch(() => {\n          dispatch(setConsultantType(consultantType));\n          dispatch(clearTimeSlot());\n          dispatch(clearAppointmentType());\n        })\n        \n      }\n    }\n  }\n\nexport const ConsultantTypes = connect(mapStateToProps, mapDispatchToProps)(ConsultantTypesUI)\n"]},"metadata":{},"sourceType":"module"}