{"ast":null,"code":"import _regeneratorRuntime from \"/home/jcbasson/Projects/ubs-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchJokes),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchPollJokesSaga);\n\nimport { call, put, take, race } from 'redux-saga/effects';\nimport { FETCH_JOKE_SUCCESS, FETCH_JOKE_FAILURE, START_POLLING, STOP_POLLING } from './actions';\nimport axios from 'axios';\nvar ENDPOINT = 'http://localhost:3000/availableSlots';\n\nvar delay = function delay(duration) {\n  var promise = new Promise(function (resolve) {\n    setTimeout(function () {\n      return resolve(true);\n    }, duration);\n  });\n  return promise;\n};\n\nfunction fetchJokes(action) {\n  var _ref, data;\n\n  return _regeneratorRuntime.wrap(function fetchJokes$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!true) {\n            _context.next = 18;\n            break;\n          }\n\n          _context.prev = 1;\n          _context.next = 4;\n          return call(function () {\n            return axios({\n              url: ENDPOINT\n            });\n          });\n\n        case 4:\n          _ref = _context.sent;\n          data = _ref.data;\n          _context.next = 8;\n          return put({\n            type: FETCH_JOKE_SUCCESS,\n            data: data\n          });\n\n        case 8:\n          _context.next = 10;\n          return call(delay, 5000);\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 16;\n          return put({\n            type: FETCH_JOKE_FAILURE,\n            message: _context.t0.message\n          });\n\n        case 16:\n          _context.next = 0;\n          break;\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 12]]);\n}\n\nexport function watchPollJokesSaga() {\n  var _data;\n\n  return _regeneratorRuntime.wrap(function watchPollJokesSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(START_POLLING);\n\n        case 3:\n          _data = _context2.sent;\n          _context2.next = 6;\n          return race([call(fetchJokes, _data), take(STOP_POLLING)]);\n\n        case 6:\n          _context2.next = 0;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/home/jcbasson/Projects/ubs-assessment/src/components/FXTicker/sagas.ts"],"names":["fetchJokes","watchPollJokesSaga","call","put","take","race","FETCH_JOKE_SUCCESS","FETCH_JOKE_FAILURE","START_POLLING","STOP_POLLING","axios","ENDPOINT","delay","duration","promise","Promise","resolve","setTimeout","action","url","data","type","message"],"mappings":";;;;yBAaUA,U;;;yBAYOC,kB;;AAzBjB,SAASC,IAAT,EAAeC,GAAf,EAA2CC,IAA3C,EAAiDC,IAAjD,QAA6D,oBAA7D;AACA,SAAoBC,kBAApB,EAAwCC,kBAAxC,EAA4DC,aAA5D,EAA2EC,YAA3E,QAA+F,WAA/F;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,QAAQ,GAAG,sCAAjB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,QAAD,EAAsB;AAClC,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACrCC,IAAAA,UAAU,CAAC;AAAA,aAAMD,OAAO,CAAC,IAAD,CAAb;AAAA,KAAD,EAAsBH,QAAtB,CAAV;AACD,GAFe,CAAhB;AAGA,SAAOC,OAAP;AACD,CALD;;AAOA,SAAUd,UAAV,CAAqBkB,MAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACS,IADT;AAAA;AAAA;AAAA;;AAAA;AAAA;AAGuB,iBAAMhB,IAAI,CAAC;AAAA,mBAAMQ,KAAK,CAAC;AAAES,cAAAA,GAAG,EAAER;AAAP,aAAD,CAAX;AAAA,WAAD,CAAV;;AAHvB;AAAA;AAGcS,UAAAA,IAHd,QAGcA,IAHd;AAAA;AAIM,iBAAMjB,GAAG,CAAC;AAAEkB,YAAAA,IAAI,EAAEf,kBAAR;AAA4Bc,YAAAA,IAAI,EAAEA;AAAlC,WAAD,CAAT;;AAJN;AAAA;AAKM,iBAAMlB,IAAI,CAACU,KAAD,EAAQ,IAAR,CAAV;;AALN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOM,iBAAMT,GAAG,CAAC;AAAEkB,YAAAA,IAAI,EAAEd,kBAAR;AAA4Be,YAAAA,OAAO,EAAE,YAAEA;AAAvC,WAAD,CAAT;;AAPN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,OAAO,SAAUrB,kBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,IADF;AAAA;AAAA;AAAA;;AAAA;AAEU,iBAAMG,IAAI,CAACI,aAAD,CAAV;;AAFV;AAEGY,UAAAA,KAFH;AAAA;AAGH,iBAAMf,IAAI,CAAC,CAACH,IAAI,CAACF,UAAD,EAAaoB,KAAb,CAAL,EAAyBhB,IAAI,CAACK,YAAD,CAA7B,CAAD,CAAV;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put, takeEvery, takeLatest, take, race } from 'redux-saga/effects'\nimport {FETCH_JOKE, FETCH_JOKE_SUCCESS, FETCH_JOKE_FAILURE, START_POLLING, STOP_POLLING } from './actions';\nimport axios from 'axios';\n\nconst ENDPOINT = 'http://localhost:3000/availableSlots'\n\nconst delay = (duration: number) => {\n  const promise = new Promise(resolve => {\n    setTimeout(() => resolve(true), duration)\n  })\n  return promise\n}\n\nfunction* fetchJokes(action: any) {\n  while (true) {\n    try {\n      const { data } = yield call(() => axios({ url: ENDPOINT }))\n      yield put({ type: FETCH_JOKE_SUCCESS, data: data })\n      yield call(delay, 5000)\n    } catch (e) {\n      yield put({ type: FETCH_JOKE_FAILURE, message: e.message })\n    }\n  }\n}\n\nexport function* watchPollJokesSaga() {\n  while (true) {\n    const data = yield take(START_POLLING)\n    yield race([call(fetchJokes, data), take(STOP_POLLING)])\n  }\n}"]},"metadata":{},"sourceType":"module"}